#include <iostream>
#include <string>
#include <cmath>
#include <stack>
using namespace std;
stack<int>Stack8;
stack<char>Stack16;
char Char_Hex[] = "0123456789ABCDEF"; //0~16를 16진수로 바꾼 값들
void solution8(int bin[], int k) {
	int p = 0;
	int num = 0;

	for (int i = 0 ; i <= k; i++) {
		if (bin[i] == 1) {
			num += pow(2, p); //비트값이 1이면 2^p 계산
		}

		//3자리 봤거나 갱신한 값중 제일 큰 자릿수(k번째 인덱스이면)이면 (ex)배열 0~2/2~4/5~7/8~10... 3개씩 묶어서 계산
		if (p == 2 || i == k) { 
			Stack8.push(num); 
			p = 0;
			num = 0;
		}
		else
			p++; //지수값 증가 (0~2)
	}
	cout << "8진수 : ";
	while (!Stack8.empty()) { //스택이 비어있지 않으면 아래 코드 실행
		cout << Stack8.top(); //맨 앞에 값 출력
		Stack8.pop(); //출력한 값 스택에서 빼오기
	}
	cout << endl;
}
void solution16(int bin[], int k) { //몇번째 배열인덱스 값 만큼 사용했는지 k로 나타냄
	int p = 0;//몇 개 봤는지
	int num = 0;
	int a, b;
	char c;
	for (int i = 0; i <= k; i++) {

		if (bin[i] == 1) {
			num += pow(2, p);
		}

		//3자리 봤거나 갱신한 값중 제일 큰 자릿수(k번째 인덱스이면)이면
		if (p == 3 || i == k) {
			a = num / 16; // 16으로 나눈 몫 
			b = num - (a * 16); // 나머지
			c = Char_Hex[b]; // 해당 나머지 인덱스 값을 가진 배열 값 (0123456789ABCDEF중에 선택)
			Stack16.push(c); // c값 스택에 넣음
			p = 0; 
			num = 0;
		}
		else
			p++; //지수값 증가 (0~3)
	}
	cout << "16진수 : ";
	while (!Stack16.empty()) {
		cout << Stack16.top();
		Stack16.pop();
	}
	cout << endl;
}

int main(void)
{
	int i, k = 0, m, n, input, binary1[32] = { 0 }, binary2[32] = { 0 };
	int CN = 1; // 비트에 더할 값 1
	cout << "10진수를 입력하세요: ";
	//scanf("%d", &dec);
	cin >> input;
	if (input > 0) { //입력값이 양의 정수면 
		cout << endl << "10진수: " << input << endl << "2진수: ";
		while (1)
		{
			m = input / 2; // 2로 나눈 몫을 구한다.
			n = input - (m * 2); // 나머지를 구한다.
			binary1[k++] = n;  // 나머지값 binary1배열에 차례대로 넣기, k값으로 몇번째 인덱스까지 넣었는지 확인
			if (m <= 0) break;
			input = m;
		}

		for (i = k; i >= 0; i--) // 배열에 새롭게 넣은 값만 출력하기 위해서 k 활용
			printf("%d", binary1[i]); // 2진수 출력

		printf("\n");
		solution8(binary1, k); // 8진수 변환 함수 (양수이기 때문에 뒤 배열값이 0인 부분은 계산 하지 않아도 되기에 k값 전달
		solution16(binary1, k); // 16진수 변환 함수
		return 0;
	}
	else if (input < 0) { // 입력값이 음의 정수면
		k = 0;
		for (i = 31; i >= 0; i--)
			binary1[i] = 1; // 2의 보수 표현법으로 기본 초기화 값 0을 1로 바꿈
		cout << endl << "10진수: " << input << endl << "2진수: ";
		 input = -input; // 음의 정수의 부호 변환
		while (1)
		{
			m = input / 2; // 2로 나눈 몫을 구한다.
			n = input - (m * 2); // 나머지를 구한다.
			n = 1 - n; // 0은 1로 1은 0으로 바꾼다.
			binary1[k++] = n; // n값을 차례대로 binary1배열에 넣는다.
			if (m <= 0) break;
			input = m; // 2로 나눈 몫은 다시 INPUT에 넣어둠
		}
		for (i = 0; i <= 31; i++)
		{
			binary2[i] = binary1[i] + CN; // 해당 모든 배열에 CN인 1을 더해준다.
			binary2[i] = binary2[i] % 2; // 만약 1에 1를 더하면 비트상으로는 0이되어야 하고 0에 1를 더하면 1이되어야하므로 위에서 더한 값을 2로 나눈 나머지를 활용한다. 
			CN = binary1[i] * CN; // 만약 1에 1를 더하면 다음 비트에도 1를 더해야하므로 binary1배열을 활용하여 CN값을 1로 유지하고 0에 1를 더하면 CN값은 0이되어야하므로 binary1의 값이 0임을 이용하여 CN을 0으로 갱신한다.
		}

		for (i = 31; i >= 0; i--)
			printf("%d", binary2[i]);

		printf("\n");
		solution8(binary2,31); //음의 정수면 0이었던 값들도 모두 1로 바뀌기 때문에 31번째 배열값까지 계산해야함
		solution16(binary2,31); 
		return 0;
	}
	else if (input == 0) {
		cout << "2진수: 0" <<endl;
		cout << "8진수: 0" << endl;
		cout << "16진수: 0" << endl;
	}
}
